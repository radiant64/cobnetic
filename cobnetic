#!/bin/sh
#! vim: syntax=sh

CBN_SITERULES=${CBN_SITECONFIG:-cobnetic-site.rules}
. ./"$CBN_SITERULES"

log() {
    [ ! -n "$CBN_SILENT" ] && printf "$1"
}
log "Read site rules from '$CBN_SITERULES'.\n"

shell_processor() {
    # $1 = processor filename
    cat >$1 <<EOF
#!$SHELL
while IFS= read -r __CBN_LINE
do
    if [ -z "\$__CBN_READING" ]
    then
        if [ -z "\$__CBN_LINE" ]
        then
            exit 0
        fi
        __CBN_OUTFILE="\$__CBN_LINE"
        __CBN_PROGRAM="\$(mktemp)"
        chmod +x "\$__CBN_PROGRAM"
        __CBN_READING=1
    elif [ "\$__CBN_LINE" = "<<:cbn:>>" ]
    then
        unset __CBN_READING
        >>"\$__CBN_OUTFILE" . "\$__CBN_PROGRAM"
        rm "\$__CBN_PROGRAM"
        >>"\$__CBN_OUTFILE" printf "\n<<:cbn:>>\n"
    else
        echo "\$__CBN_LINE" >>"\$__CBN_PROGRAM"
    fi
done

EOF
    chmod +x $1
}

python_processor() {
    # $1 = processor filename
    cat >$1 <<EOF
#!/usr/bin/env python
import os
import sys
import textwrap
from os import environ as env

sys.path.insert(0, os.getcwd())

while True:
    _program = ""
    _reading = True
    _outfile = sys.stdin.readline().strip()
    if not _outfile: 
        sys.exit(0)
    while _reading:
        _line = sys.stdin.readline()
        if _line == "<<:cbn:>>\n":
            _reading = False
        elif _line == "":
            sys.exit(0)
        else:
            _program += _line
    with open(_outfile, "w") as sys.stdout:
        exec(textwrap.dedent(_program))
        print("\n<<:cbn:>>\n")
EOF
    chmod +x $1
}

CBN_PROCESSOR=${CBN_PROCESSOR:-shell_processor}
CBN_EXT=${CBN_EXT:-dte}
CBN_STATIC=${CBN_STATIC:-static}
CBN_OUTPUTPATH=${CBN_OUTPUTPATH:-site}
CBN_PAGES=${CBN_PAGES:-pages}
CBN_TEMPLATES=${CBN_TEMPLATES:-templates}

CBN_MARKDOWN="markdown -f fencedcode -f dlextra"

enumerate() {
    for p in $(find "${CBN_PAGES}" -name "*.md.$CBN_EXT")
    do
        echo $p
    done
}

start_processor() {
    # $1 = processor filename
    # $2 = send pipe
    (
        <$2 $1
        rm $1
    ) &
}

make_sender() {
    # $1 = sender filename
    # $2 = send pipe
    # Sets up a small script that sends a program to the processor, reads the
    # response, and exits.
    cat >$1 <<EOF
#!/usr/bin/env python
import atexit
import os
import sys
import tempfile

response = os.path.join(tempfile.mkdtemp(), "out")
os.mkfifo(response)

@atexit.register
def cleanup():
    try:
        os.unlink(response)
    except:
        pass

with open("$2", "w") as f:
    f.write("%s\n" % response)
    f.write(sys.stdin.read())
    f.write("\n<<:cbn:>>\n")

with open(response, "r") as r:
    for line in r:
        if line == "<<:cbn:>>\n":
            break
        print(line, end='')
EOF
    chmod +x $1
}

stop_processor() {
    # $1 = processor filename
    # $2 = send pipe
    printf "\n<<:cbn:>>\n" >$2
    exec 3>&-
    while [ -f $1 ]; do :; done
    rm $2
}

process_begin() {
    SENDPIPE=$(mktemp -u)
    mkfifo $SENDPIPE
    exec 3<>$SENDPIPE
    PROCESSOR=$(mktemp)
    $CBN_PROCESSOR $PROCESSOR
    start_processor $PROCESSOR $SENDPIPE
    SENDER=$(mktemp)
    make_sender $SENDER $SENDPIPE
} 

process_end() {
    stop_processor $PROCESSOR $SENDPIPE
    rm $SENDER
}

get_template_filename() {
    echo "templates/$1.html.$CBN_EXT"
}

extract_metadata() {
    HEADER_LINES=0
    SYMBOL=""
    while [ "$SYMBOL" != "..." ]
    do
        read line
        SYMBOL=$(echo "$line" | awk '{print $1}')
        if [ "$SYMBOL" != "..." ]
        then
            export $SYMBOL="$(echo "$line"|sed 's/^'"$SYMBOL"'[[:space:]]*//')"
        fi
        HEADER_LINES=$(expr $HEADER_LINES + 1)
    done
}

export CBN_PAGES="$(enumerate)"

log "Generating website in folder '$CBN_OUTPUTPATH'.\n\n"

echo "$CBN_PAGES" | while read page
do
    log "Processing page '$page'... "
(
    extract_metadata <"$page"
    tmpl_file="$(get_template_filename "$CBN_TEMPLATE")"
    rel_name="${page#$CBN_PAGES}"
    base_dir="${rel_name%/$(basename "$page")}"
    base_dir="${base_dir#pages}"
    out_dir="$CBN_OUTPUTPATH${base_dir}"
    out_name="$(basename "$page"|cut -d. -f1).html"
    export CBN_PAGEPATH="$base_dir$out_name"

    mkdir -p "$out_dir"

    process_begin
        export CBN_MARKDOWNCONTENT="$(\
            awk "NR>$HEADER_LINES" "$page" | dtepr $SENDER | $CBN_MARKDOWN)"
    process_end

    process_begin
        cat "$tmpl_file" | dtepr $SENDER >"$out_dir/$out_name"
        ERR=$?
    process_end

    [ $ERR -eq 0 ] && log "OK!\n" || { log "\nError! Aborting.\n"; exit 1; }
    log "\tOutput: '$out_dir/$out_name'\n"
)
done

if [ -e "$CBN_STATIC" ] 
then
    log "\nCopying static files in '$CBN_STATIC'...\n\n"
    cp -r "$CBN_STATIC" "$CBN_OUTPUTPATH"
else
    log "\nNo static file directory found, skipping.\n\n"
fi

log "All done.\n"

